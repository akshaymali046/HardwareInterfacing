
servoatmega8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000150  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  000001a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000078  00000000  00000000  000001c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000023e  00000000  00000000  0000023c  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000161  00000000  00000000  0000047a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000201  00000000  00000000  000005db  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000060  00000000  00000000  000007dc  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    0000011d  00000000  00000000  0000083c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c8  00000000  00000000  00000959  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00000a21  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d4 e0       	ldi	r29, 0x04	; 4
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e5       	ldi	r30, 0x50	; 80
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	a0 36       	cpi	r26, 0x60	; 96
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	a0 e6       	ldi	r26, 0x60	; 96
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 36       	cpi	r26, 0x60	; 96
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 a6 00 	jmp	0x14c	; 0x14c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__heap_end>

00000092 <main>:




int main(void)
{
  92:	8f b5       	in	r24, 0x2f	; 47
  94:	82 6a       	ori	r24, 0xA2	; 162
  96:	8f bd       	out	0x2f, r24	; 47
//void 

void init_hardware_pwm1(void)
{
  TCCR1A |= (BIT7|BIT5|BIT1);      // configuration for timer on compare mode for pwm configuration
  TCCR1B |= (BIT4|BIT3|BIT1|BIT0);
  98:	8e b5       	in	r24, 0x2e	; 46
  9a:	8b 61       	ori	r24, 0x1B	; 27
  9c:	8e bd       	out	0x2e, r24	; 46
  
  
  
  ICR1=2499;                      // selecting pwm period to 20 ms 
  9e:	83 ec       	ldi	r24, 0xC3	; 195
  a0:	99 e0       	ldi	r25, 0x09	; 9
  a2:	97 bd       	out	0x27, r25	; 39
  a4:	86 bd       	out	0x26, r24	; 38
  
  DDRD|=(BIT4|BIT5);              // Pwm out to output PORTD4 and PORTD5
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	80 63       	ori	r24, 0x30	; 48
  aa:	81 bb       	out	0x11, r24	; 17
    Motor_PWM1 = lower_bound;  
}

void change_speed_pwm1(int speed)
{
  Motor_PWM1 = speed;
  ac:	63 e1       	ldi	r22, 0x13	; 19
  ae:	71 e0       	ldi	r23, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  b0:	28 ec       	ldi	r18, 0xC8	; 200
  b2:	30 e0       	ldi	r19, 0x00	; 0
  b4:	4a e5       	ldi	r20, 0x5A	; 90
  b6:	50 e0       	ldi	r21, 0x00	; 0
  b8:	7b bd       	out	0x2b, r23	; 43
  ba:	6a bd       	out	0x2a, r22	; 42
  bc:	80 e2       	ldi	r24, 0x20	; 32
  be:	9e e4       	ldi	r25, 0x4E	; 78
  c0:	f9 01       	movw	r30, r18
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x30>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x2e>
  ca:	5b bd       	out	0x2b, r21	; 43
  cc:	4a bd       	out	0x2a, r20	; 42
  ce:	80 e2       	ldi	r24, 0x20	; 32
  d0:	9e e4       	ldi	r25, 0x4E	; 78
  d2:	f9 01       	movw	r30, r18
  d4:	31 97       	sbiw	r30, 0x01	; 1
  d6:	f1 f7       	brne	.-4      	; 0xd4 <main+0x42>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  da:	d9 f7       	brne	.-10     	; 0xd2 <main+0x40>
  dc:	ed cf       	rjmp	.-38     	; 0xb8 <main+0x26>

000000de <increase_speed_pwm1>:

}
return 0;
}
void increase_speed_pwm1(int increment)
{
  de:	2a b5       	in	r18, 0x2a	; 42
  e0:	3b b5       	in	r19, 0x2b	; 43
  e2:	ac 01       	movw	r20, r24
  e4:	28 0f       	add	r18, r24
  e6:	39 1f       	adc	r19, r25
  e8:	24 51       	subi	r18, 0x14	; 20
  ea:	31 40       	sbci	r19, 0x01	; 1
  ec:	38 f4       	brcc	.+14     	; 0xfc <increase_speed_pwm1+0x1e>
  if ( Motor_PWM1 + increment <= upper_bound)
    Motor_PWM1 = Motor_PWM1 + increment;
  ee:	8a b5       	in	r24, 0x2a	; 42
  f0:	9b b5       	in	r25, 0x2b	; 43
  f2:	48 0f       	add	r20, r24
  f4:	59 1f       	adc	r21, r25
  f6:	5b bd       	out	0x2b, r21	; 43
  f8:	4a bd       	out	0x2a, r20	; 42
  fa:	08 95       	ret
  else
    Motor_PWM1 = upper_bound;
  fc:	83 e1       	ldi	r24, 0x13	; 19
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	9b bd       	out	0x2b, r25	; 43
 102:	8a bd       	out	0x2a, r24	; 42
 104:	08 95       	ret

00000106 <decrease_speed_pwm1>:
}

void decrease_speed_pwm1(int decrement)
{
 106:	2a b5       	in	r18, 0x2a	; 42
 108:	3b b5       	in	r19, 0x2b	; 43
 10a:	ac 01       	movw	r20, r24
 10c:	28 1b       	sub	r18, r24
 10e:	39 0b       	sbc	r19, r25
 110:	2a 35       	cpi	r18, 0x5A	; 90
 112:	31 05       	cpc	r19, r1
 114:	28 f0       	brcs	.+10     	; 0x120 <decrease_speed_pwm1+0x1a>
  if (Motor_PWM1 - decrement >= lower_bound)
    Motor_PWM1 = Motor_PWM1 - decrement;
 116:	8a b5       	in	r24, 0x2a	; 42
 118:	9b b5       	in	r25, 0x2b	; 43
 11a:	84 1b       	sub	r24, r20
 11c:	95 0b       	sbc	r25, r21
 11e:	02 c0       	rjmp	.+4      	; 0x124 <decrease_speed_pwm1+0x1e>
  else
    Motor_PWM1 = lower_bound;  
 120:	8a e5       	ldi	r24, 0x5A	; 90
 122:	90 e0       	ldi	r25, 0x00	; 0
 124:	9b bd       	out	0x2b, r25	; 43
 126:	8a bd       	out	0x2a, r24	; 42
 128:	08 95       	ret

0000012a <change_speed_pwm1>:
}

void change_speed_pwm1(int speed)
{
 12a:	9b bd       	out	0x2b, r25	; 43
 12c:	8a bd       	out	0x2a, r24	; 42
  Motor_PWM1 = speed;
}
 12e:	08 95       	ret

00000130 <init_hardware_pwm1>:

//void 

void init_hardware_pwm1(void)
{
 130:	8f b5       	in	r24, 0x2f	; 47
 132:	82 6a       	ori	r24, 0xA2	; 162
 134:	8f bd       	out	0x2f, r24	; 47
  TCCR1A |= (BIT7|BIT5|BIT1);      // configuration for timer on compare mode for pwm configuration
  TCCR1B |= (BIT4|BIT3|BIT1|BIT0);
 136:	8e b5       	in	r24, 0x2e	; 46
 138:	8b 61       	ori	r24, 0x1B	; 27
 13a:	8e bd       	out	0x2e, r24	; 46
  
  
  
  ICR1=2499;                      // selecting pwm period to 20 ms 
 13c:	83 ec       	ldi	r24, 0xC3	; 195
 13e:	99 e0       	ldi	r25, 0x09	; 9
 140:	97 bd       	out	0x27, r25	; 39
 142:	86 bd       	out	0x26, r24	; 38
  
  DDRD|=(BIT4|BIT5);              // Pwm out to output PORTD4 and PORTD5
 144:	81 b3       	in	r24, 0x11	; 17
 146:	80 63       	ori	r24, 0x30	; 48
 148:	81 bb       	out	0x11, r24	; 17
  
}
 14a:	08 95       	ret

0000014c <_exit>:
 14c:	f8 94       	cli

0000014e <__stop_program>:
 14e:	ff cf       	rjmp	.-2      	; 0x14e <__stop_program>
